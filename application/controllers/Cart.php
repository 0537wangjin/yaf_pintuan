<?php

/**
 * Created by PhpStorm.
 * User: wangjin
 * Date: 2017/9/21
 * Time: 上午9:03
 * 购物车
 */
class CartController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 购物车首页
     */
    public function indexAction()
    {
        $assign = array(
            'pagetitle' => '购物车',
            'active' => 'cart',
        );
        $sessionid = Help::getSessionID();
        // 获取购物车列表
        $list = $this->db->select('sys_cart', '*', ['session_id' => $sessionid, 'rushid[<]' => 1 ]);
        $assign['list'] = $list;
        // render
        echo $this->twig->render('/cart/index.html', $assign);
    }

    /**
     * 减少 - 购物车
     */
    public function cartMinusAction()
    {
        $sessionid = Help::getSessionID();
        // param
        $goodsid = intval(Help::getg('goodsid'));
        if (empty($goodsid)) {
            die('参数错误');
        }
        $assign['goodsid'] = $goodsid;
        // 获取商品信息
        $goods = $this->db->get('sys_goods', ['id', 'name', 'imgurl', 'price'], ['id' => $goodsid]);
        if (empty($goods)) {
            die('参数错误');
        }
        // 检查购物车里有没有这件商品
        $ifhas = $this->db->get('sys_cart', '*', ['session_id' => $sessionid, 'goodsid' => $goodsid]);
        if (!empty($ifhas)) {
            // 至少保留一
            if ($ifhas['buycount'] < 2) {
                die('success');
            }
            // 重新计算总价
            $price = $ifhas['goodsprice'] * ($ifhas['buycount'] - 1);
            // 更新商品数量
            $res = $this->db->update('sys_cart', ['price' => $price, 'buycount[-]' => 1, 'regdate' => time()], ['session_id' => $sessionid, 'goodsid' => $goodsid]);
            if ($res) {
                die('success');
            }
        }
    }

    /**
     * 删除购物车商品
     */
    public function goodsDelAction()
    {
        $sessionid = Help::getSessionID();
        // param
        $goodsid = intval(Help::getg('goodsid'));
        if (empty($goodsid)) {
            die('参数错误');
        }
        $assign['goodsid'] = $goodsid;
        // 获取商品信息
        $goods = $this->db->get('sys_goods', ['id', 'name', 'imgurl', 'price'], ['id' => $goodsid]);
        if (empty($goods)) {
            die('参数错误');
        }
        // 删除商品
        $this->db->delete('sys_cart', ['session_id' => $sessionid, 'goodsid' => $goodsid]);
        die('success');
    }

    /**
     * 优惠券列表
     */
    public function couponAction()
    {
        $sessionid = Help::getSessionID();
        $uid = 0;
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            $this->redirect('/index/register?backurl=/cart');
        } else {
            $uid = Help::getSession('userid');
        }
        $time = time();
        $assign = array(
            'pagetitle' => '可用优惠券'
        );
        $ids = unserialize(Help::getSession('confirmgoods'));
        // 读取未过期优惠券
        $list = $this->db->query('SELECT a.id,a.client_id,a.cid,a.usestatus, b.endtime, b.begintime, b.keytype,b.keyid,b.price,b.minprice,b.status FROM `sys_coupon_client` AS a LEFT JOIN `sys_coupon` AS b ON(a.cid = b.id) WHERE 1 AND ' . $time . ' > b.`begintime` AND ' . $time . ' < b.endtime AND a.usestatus = 0 ORDER BY a.usestatus, b.endtime DESC LIMIT 50')->fetchAll();
        // print_r($list);
        // echo Help::getSession('confirmgoods');
        foreach ($list as $key => $val) {
            $list[$key]['price'] = intval($list[$key]['price']);
            $list[$key]['minprice'] = intval($list[$key]['minprice']);
            $list[$key]['endtime'] = date('Y-m-d', $list[$key]['endtime']);
            // 全平台判断
            if ($list[$key]['keytype'] == '1') {
                // $list[$key]['flag'] = '全平台';
                // 判断有没有满足要求
                // 1. 获取订单总金额
                $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $ids]);
                if ($list[$key]['minprice'] > $sum) {
                    unset($list[$key]);
                }
            } elseif ($list[$key]['keytype'] == '2') {
                // $list[$key]['flag'] = '某分类';
                $list[$key]['goodsid'] = '';
                $list[$key]['goodsprice'] = '';
                // 判断有没有满足要求
                // 1. 判断商品中是否属于分类
                $ifhas = 0;
                $gids = array();
                $g = $this->db->select('sys_goods', ['id', 'price', 'firsttypeid', 'secondtypeid'], ['id' => $ids]);
                foreach ($g as $k => $v) {
                    // 俩分类都不等于keyid, then unset
                    if (($g[$k]['firsttypeid'] == $list[$key]['keyid']) || ($g[$k]['secondtypeid'] == $list[$key]['keyid'])) {
                        $ifhas = 1;
                        $list[$key]['goodsid'] .= $g[$k]['id'] . ',';
                        $list[$key]['goodsprice'] .= $g[$k]['price'] . ',';
                        $gids[] = $g[$k]['id'];
                    }
                }
                // if goodsid do'not equals keyid then unset
                if ($ifhas < 1) {
                    unset($list[$key]);
                }
                // 2. 获取订单总金额
                if (isset($list[$key])) {
                    $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $gids]);
                    if ($list[$key]['minprice'] > $sum) {
                        unset($list[$key]);
                    }
                }
            } elseif ($list[$key]['keytype'] == '3') {
                //$list[$key]['flag'] = '某商品';
                // 判断有没有满足要求
                // 2. 如果没有商品符合优惠券,进行下一张判断
                if (!in_array($list[$key]['keyid'], $ids)) {
                    unset($list[$key]);
                    continue;
                }
                if (isset($list[$key])) {
                    // 3. 判断商品金额是否满足条件
                    for ($i = 0; $i < count($ids); $i++) {
                        if ($list[$key]['keyid'] == $ids[$i]) {
                            $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $ids[$i]]);
                            if ($list[$key]['minprice'] > $sum) {
                                unset($list[$key]);
                            }
                        }
                    }
                }

            }
        }
        $assign['list'] = $list;
        // render
        echo $this->twig->render('/cart/coupon.html', $assign);
    }

    /**
     * 确认订单
     */
    public function confirmAction()
    {
        $uid = 0;
        $ids = array();
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            $this->redirect('/index/register?backurl=/cart');
        } else {
            $uid = Help::getSession('userid');
        }
        $assign = array(
            'pagetitle' => '确认订单',
        );
        $sessionid = Help::getSessionID();
        //goods=11,
        $goods = Help::getg('goods');
        if (empty($goods)) {
            // judge goods in session
            if (Yaf_Session::getInstance()->has('confirmgoods')) {
                $ids = unserialize(Help::getSession('confirmgoods'));
            } else {
                die('请选择要结算的商品!');
            }
        } else {
            // 去空/拆分
            $ids = array_filter(explode(',', $goods));
            // 把商品ID保存到session, 用于跳转返回处理
            Help::setSession('confirmgoods', serialize($ids));
        }
        // 获取购物车列表
        $list = $this->db->select('sys_cart', '*', ['session_id' => $sessionid, 'goodsid' => $ids]);
        $assign['list'] = $list;
        // 计算总金额
        $assign['totalfee'] = 0;
        foreach ($list as $key => $val) {
            $assign['totalfee'] += $list[$key]['price'];
        }
        // 获取收货地址
        if (!empty($_GET['address'])) {
            $addressid = intval(Help::getg('address'));
            $assign['address'] = $this->db->get('sys_address', '*', ['client_id' => $uid, 'id' => $addressid]);
            // 把addressID保存到session, 用于跳转返回处理
            Help::setSession('confirmaddress', $addressid);
        } else {
            if (Yaf_Session::getInstance()->has('confirmaddress')) {
                $addressid = Help::getSession('confirmaddress');
                $assign['address'] = $this->db->get('sys_address', '*', ['id' => $addressid, 'client_id' => $uid, 'ORDER' => ['rec' => 'DESC']]);
            } else {
                $assign['address'] = $this->db->get('sys_address', '*', ['client_id' => $uid, 'ORDER' => ['rec' => 'DESC']]);
            }
            Help::setSession('confirmaddress', $assign['address']['id']);
        }
        // 获取优惠券
        if (!empty($_GET['coupon'])) {
            $couponid = intval(Help::getg('coupon'));
            $assign['coupon'] = $this->db->get('sys_coupon_client', '*', ['client_id' => $uid, 'id' => $couponid]);
            // 把 couponid 保存到session, 用于跳转返回处理
            Help::setSession('confirmcoupon', $couponid);
            // 获取优惠券价格
            $c = $this->db->get('sys_coupon', ['price'], ['id' => $assign['coupon']['cid']]);
            $assign['coupon']['price'] = $c['price'];
            $assign['totalfee'] -= $assign['coupon']['price'];
        } else {
            Help::setSession('confirmcoupon', null);
        }
        // 是否是拼团订单
        if (Help::getg('rush')){
            $assign['rush'] = 1;
            if (Help::getg('rushid')){
                $assign['rushid'] = Help::getg('rushid');
            }
        }
        // render
        echo $this->twig->render('/cart/confirm.html', $assign);
    }

    /**
     * 提交订单 - 创建订单
     */
    public function orderAction()
    {
        $sessionid = Help::getSessionID();
        $time = time();
        $uid = 0;
        $ids = array();
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            $this->redirect('/index/register?backurl=/cart');
        } else {
            $uid = Help::getSession('userid');
        }
        // 1. 获取商品ID
        if (Yaf_Session::getInstance()->has('confirmgoods')) {
            $ids = unserialize(Help::getSession('confirmgoods'));
        } else {
            die('请选择要结算的商品!');
        }

        // 2. 获取收货地址
        if (Yaf_Session::getInstance()->has('confirmaddress')) {
            $addressid = Help::getSession('confirmaddress');
            // 验证收货地址正确性
            $ifhas = $this->db->has('sys_address', ['id' => $addressid, 'client_id' => $uid]);
            if (!$ifhas) {
                die('收货地址参数错误!');
            }
        } else {
            die('收货地址参数错误!');
        }
        // 3. 获取优惠券
        $couponid = 0;
        if (Yaf_Session::getInstance()->has('confirmcoupon')) {
            $couponid = Help::getSession('confirmcoupon');
            // 获取优惠券信息
            $coupon = $this->db->query('SELECT a.id,a.client_id,a.cid,a.usestatus, b.endtime, b.begintime, b.keytype,b.keyid,b.price,b.minprice,b.status FROM `sys_coupon_client` AS a LEFT JOIN `sys_coupon` AS b ON(a.cid = b.id) WHERE 1 AND ' . $time . ' > b.`begintime` AND ' . $time . ' < b.endtime AND a.usestatus = 0 AND a.id = ' . $couponid . ' AND a.client_id = ' . $uid . ' ORDER BY a.usestatus, b.endtime DESC LIMIT 1')->fetchAll()[0];
            // print_r($coupon);
            // 4. 验证优惠券信息
            // 全平台判断
            if ($coupon['keytype'] == '1') {
                // $list[$key]['flag'] = '全平台';
                // 判断有没有满足要求
                // 1. 获取订单总金额
                $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $ids]);
                if ($coupon['minprice'] > $sum) {
                    die('优惠券错误');
                }
            } elseif ($coupon['keytype'] == '2') {
                // $list[$key]['flag'] = '某分类';
                $coupon['goodsid'] = '';
                $coupon['goodsprice'] = '';
                // 判断有没有满足要求
                // 1. 判断商品中是否属于分类
                $ifhas = 0;
                $gids = array();
                $g = $this->db->select('sys_goods', ['id', 'price', 'firsttypeid', 'secondtypeid'], ['id' => $ids]);
                foreach ($g as $k => $v) {
                    // 俩分类都不等于keyid, then unset
                    if (($g[$k]['firsttypeid'] == $coupon['keyid']) || ($g[$k]['secondtypeid'] == $coupon['keyid'])) {
                        $ifhas = 1;
                        $coupon['goodsid'] .= $g[$k]['id'] . ',';
                        $coupon['goodsprice'] .= $g[$k]['price'] . ',';
                        $gids[] = $g[$k]['id'];
                    }
                }
                // if goodsid do'not equals keyid then unset
                if ($ifhas < 1) {
                    die('优惠券错误');
                }
                // 2. 获取订单总金额
                if (isset($coupon)) {
                    $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $gids]);
                    if ($coupon['minprice'] > $sum) {
                        unset($coupon);
                    }
                }
            } elseif ($coupon['keytype'] == '3') {
                //$list[$key]['flag'] = '某商品';
                // 判断有没有满足要求
                // 2. 如果没有商品符合优惠券,进行下一张判断
                if (!in_array($coupon['keyid'], $ids)) {
                    unset($coupon);
                }
                if (isset($coupon)) {
                    // 3. 判断商品金额是否满足条件
                    for ($i = 0; $i < count($ids); $i++) {
                        if ($coupon['keyid'] == $ids[$i]) {
                            $sum = $this->db->sum('sys_cart', ['price'], ['session_id' => $sessionid, 'goodsid' => $ids[$i]]);
                            if ($coupon['minprice'] > $sum) {
                                unset($coupon);
                            }
                        }
                    }
                }
            }
        }
        // 获取购物车列表
        $list = $this->db->select('sys_cart', '*', ['session_id' => $sessionid, 'goodsid' => $ids]);

        // 计算总金额
        $totalfee = 0;
        foreach ($list as $key => $val) {
            $totalfee += $list[$key]['price'];
        }
        // 5. 创建订单
        $transid = self::transC();
        // 主表参数
        $param_order = array(
            'client_id' => $uid,
            'keytype' => 1,//1普通商品 2拼团
            'transid' => $transid,
            'status' => 1,// 代付款
            'goodsprice' => $totalfee,//总金额
            'addressid' => $addressid,//收货地址ID
            'couponid' => $couponid,//优惠券ID
            'regdate' => $time,//创建时间
            'payflag' => '0',//0未付款
        );
        // 开始事务
        $res = $this->db->action(function ($db) use ($param_order, $list) {
            $sql1 = $db->insert('sys_order', $param_order);
            if ($sql1->rowCount() < 1) {
                return false;
            }
            $orderid = $db->id();
            // 插入附表
            foreach ($list as $k => $v) {
                $sql = $db->insert('sys_order_item', array(
                    'orderid' => $orderid,
                    'goodsid' => $list[$k]['goodsid'],
                    'goodsprice' => $list[$k]['goodsprice'],
                    'price' => $list[$k]['price'],
                    'buycount' => $list[$k]['buycount'],
                    'name' => $list[$k]['name'],
                    'imgurl' => $list[$k]['imgurl']
                ));
                if ($sql->rowCount() < 1) {
                    return false;
                    break;
                }
            }
        });
        if ($res == true) {
            // 6. 清空购物车结算商品
            $this->db->delete('sys_cart', ['session_id' => $sessionid, 'goodsid' => $ids]);
            // 7. 优惠券改成已使用
            if ($couponid > 0) {
                $this->db->update('sys_coupon_client', ['usestatus' => 1], ['id' => $couponid]);
            }
        }
        $this->redirect('/cart/payment?transid=' . $transid);
    }

    /**
     * 普通订单付款
     */
    public function paymentAction()
    {
        $assign = array(
            'pagetitle' => '支付',
        );
        $transid = Help::getg('transid');

        if (empty($transid)) {
            $this->success(0, '参数错误!');
        }
        // $sessionid = Help::getSessionID();
        $time = time();
        $uid = 0;
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            $this->redirect('/index/register?backurl=/cart');
        } else {
            $uid = Help::getSession('userid');
        }
        // 获取订单信息
        $order = $this->db->get('sys_order', '*', ['transid' => $transid, 'client_id' => $uid]);
        if (empty($order)) {
            $this->success(0, '参数错误!');
        }
        if ($order['status'] != '1') {
            $this->success(0, '订单状态错误!');
        }
        $assign['order'] = $order;
        // 获取可以得到的积分
        $coins = 0;
        $temp = $this->db->select('sys_order_item', ['[>]sys_goods' => ['goodsid' => 'id']], ['sys_order_item.goodsid', 'sys_order_item.buycount', 'sys_goods.coins'], ['sys_order_item.orderid' => $order['id']]);
        foreach ($temp as $key => $val) {
            $coins += $temp[$key]['buycount'] * $temp[$key]['coins'];
        }
        $assign['coins'] = $coins;
        // 余额查询
        $user = $this->db->get('sys_client', ['feeaccount'], ['id' => $uid]);
        $assign['user'] = $user;
        // render
        echo $this->twig->render('/cart/payment.html', $assign);
    }

    /**
     * 拼团订单付款
     */
    public function paymentRushAction()
    {
        $assign = array(
            'pagetitle' => '支付',
        );
        $transid = Help::getg('transid');

        if (empty($transid)) {
            $this->success(0, '参数错误!');
        }
        // $sessionid = Help::getSessionID();
        $time = time();
        $uid = 0;
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            $this->redirect('/index/register?backurl=/cart');
        } else {
            $uid = Help::getSession('userid');
        }
        // 获取订单信息
        $order = $this->db->get('sys_rush_order', '*', ['transid' => $transid, 'client_id' => $uid]);

        if (empty($order)) {
            $this->success(0, '参数错误!');
        }
        if ($order['status'] != '1') {
            $this->success(0, '订单状态错误!');
        }
        $assign['order'] = $order;
        // 获取可以得到的积分
        $coins = 0;
        $goods = $this->db->get('sys_goods', ['coins'], ['id' => $order['goodsid']]);
        $assign['coins'] = $goods['coins'];
        // 余额查询
        $user = $this->db->get('sys_client', ['feeaccount'], ['id' => $uid]);
        $assign['user'] = $user;
        // render
        echo $this->twig->render('/cart/paymentrush.html', $assign);
    }
    /**
     * 生成订单号
     * @return string
     */
    private function transC()
    {
        $transid = date('YmdHis') . Help::randStr(6, 'NUMBER');
        $ifhas = $this->db->has('sys_order', ['transid' => $transid]);
        if (!empty($ifhas)) {
            return $this->transC();
        }
        return $transid;
    }

    /**
     * 确定支付
     */
    public function payConfirmAction()
    {
        $transid = Help::getg('transid');
        if (empty($transid)) {
            die('参数错误');
        }
        $paytype = intval(Help::getg('paytype'));
        if (empty($paytype)) {
            die('参数错误');
        }
        $paypass = Help::getg('paypass');
        if (empty($paypass)) {
            die('请输入支付密码!');
        }
        $uid = 0;
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            die('未登录');
        } else {
            $uid = Help::getSession('userid');
        }
        // 验证支付密码
        $user = $this->db->get('sys_client', ['paypassword'], ['id' => $uid]);
        if ($user['paypassword'] != md5($paypass)){
            die('支付密码错误!');
        }
        // 获取订单信息
        $order = $this->db->get('sys_order', '*', ['transid' => $transid, 'client_id' => $uid]);
        if (empty($order)) {
            die('参数错误');
        }
        if ($order['status'] != '1') {
            die('状态错误');
        }
        // 余额支付
        if ($paytype == 1) {
            // 检查余额
            $user = $this->db->get('sys_client', ['feeaccount'], ['id' => $uid]);
            if ($user['feeaccount'] < $order['goodsprice']) {
                die('余额不足');
            }
            $acp = array(
                'uid' => $uid,
                'transid' => $transid,
                'goodsprice' => $order['goodsprice'],

            );
            // sys_pay 参数
            $parampay = array(
                'client_id' => $uid,
                'paytype' => 1,
                'keytype' => '2',
                'keyid' => $order['id'],
                'out_trade_no' => $order['transid'],
                'total_fee' => $order['goodsprice'],
                'payflag' => '1',
                'content' => '支付',
                'regdate' => time(),
            );
            // 获取可以得到的积分
            $coins = 0;
            $temp = $this->db->select('sys_order_item', ['[>]sys_goods' => ['goodsid' => 'id']], ['sys_order_item.goodsid', 'sys_order_item.buycount', 'sys_goods.coins'], ['sys_order_item.orderid' => $order['id']]);
            foreach ($temp as $key => $val) {
                $coins += $temp[$key]['buycount'] * $temp[$key]['coins'];
                // 减少库存, 增加销量
                $this->db->update('sys_goods', ['stock[-]' => $temp[$key]['buycount'], 'realsale[+]' => $temp[$key]['buycount']], ['id' => $temp[$key]['goodsid']]);
            }
            // 开始事务
            $res = $this->db->action(function ($db) use ($acp, $parampay, $coins) {
                // 更新订单状态
                $sql1 = $db->update('sys_order', ['status' => 2, 'payflag' => 1, 'paytype' => 1, 'paytime' => time(), 'money' => $acp['goodsprice']], ['transid' => $acp['transid']]);
                if ($sql1->rowCount() < 1) {
                    return false;
                }
                // 减少余额, 增加积分
                $sql2 = $db->update('sys_client', ['feeaccount[-]' => $acp['goodsprice'], 'score[+]' => $coins], ['id' => $acp['uid']]);
                if ($sql2->rowCount() < 1) {
                    return false;
                }
                // 插入到交易记录
                $sql3 = $db->insert('sys_pay', $parampay);
                if ($sql3->rowCount() < 1) {
                    return false;
                }
                // 插入到积分记录
                $sql4 = $db->insert('sys_client_score', ['client_id' => $parampay['client_id'], 'title' => '消费', 'regdate' => time(), 'num' => $coins]);
                if ($sql4->rowCount() < 1) {
                    return false;
                }
            });
            if ($res == true) {
                die('success');
            } else {
                die('系统事务出错!');
            }
        }
    }
    /**
     * 拼团订单支付
     */
    public function payRushConfirmAction()
    {
        $transid = Help::getg('transid');
        if (empty($transid)) {
            die('订单号错误!');
        }
        $paytype = intval(Help::getg('paytype'));
        if (empty($paytype)) {
            die('支付类型错误!');
        }
        $paypass = Help::getg('paypass');
        if (empty($paypass)) {
            die('请输入支付密码!');
        }
        $uid = 0;
        // 如果没有登录,跳转到登录
        if (!Yaf_Session::getInstance()->has('userid')) {
            die('未登录');
        } else {
            $uid = Help::getSession('userid');
        }
        // 验证支付密码
        $user = $this->db->get('sys_client', ['paypassword'], ['id' => $uid]);
        if ($user['paypassword'] != md5($paypass)){
            die('支付密码错误!');
        }
        // 获取订单信息
        $order = $this->db->get('sys_rush_order', '*', ['transid' => $transid, 'client_id' => $uid]);
        if (empty($order)) {
            die('参数错误');
        }
        if ($order['status'] != '1') {
            die('状态错误');
        }

        // 余额支付
        if ($paytype == 1) {
            // 检查余额
            $user = $this->db->get('sys_client', ['feeaccount'], ['id' => $uid]);
            if ($user['feeaccount'] < $order['money']) {
                die('余额不足');
            }
            $acp = array(
                'uid' => $uid,
                'transid' => $transid,
                'goodsprice' => $order['money'],

            );
            // sys_pay 参数
            $parampay = array(
                'client_id' => $uid,
                'paytype' => 1,
                'keytype' => '2',
                'keyid' => $order['id'],
                'out_trade_no' => $order['transid'],
                'total_fee' => $order['money'],
                'payflag' => '1',
                'content' => '支付',
                'regdate' => time(),
            );
            // 获取可以得到的积分
            $coins = 0;
            $temp = $this->db->get('sys_goods', ['coins'], ['id' => $order['goodsid']]);
            $coins = $temp['coins'];
            // 开始事务
            $res = $this->db->action(function ($db) use ($acp, $parampay, $coins) {
                // 更新订单状态
                $sql1 = $db->update('sys_rush_order', ['status' => 20, 'paytype' => 1, 'paytime' => time(), 'money' => $acp['goodsprice']], ['transid' => $acp['transid']]);
                if ($sql1->rowCount() < 1) {
                    return false;
                }
                // 减少余额, 增加积分
                $sql2 = $db->update('sys_client', ['feeaccount[-]' => $acp['goodsprice'], 'score[+]' => $coins], ['id' => $acp['uid']]);
                if ($sql2->rowCount() < 1) {
                    return false;
                }
                // 插入到交易记录
                $sql3 = $db->insert('sys_pay', $parampay);
                if ($sql3->rowCount() < 1) {
                    return false;
                }
                // 插入到积分记录
                $sql4 = $db->insert('sys_client_score', ['client_id' => $parampay['client_id'], 'title' => '消费', 'regdate' => time(), 'num' => $coins]);
                if ($sql4->rowCount() < 1) {
                    return false;
                }
            });
            if ($res == true) {
                die('success');
            } else {
                die('系统事务出错!');
            }
        }
    }
}