<?php

/**
 * Created by PhpStorm.
 * User: wangjin [445899710@qq.com]
 * Date: 2017/9/18
 * 用户中心
 */
class MyController extends BaseController
{

    private $uid = 0;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        // 过滤验证
        $filter = ['my/index', 'my/aboutus', 'my/my'];
        if (!in_array(Help::getRoute(), $filter)) {
            // 验证登录
            if (!Yaf_Session::getInstance()->has('userid')) {
                $this->redirect('/index/register');
            } else {
                $this->uid = Help::getSession('userid');
            }
        }
    }

    public function indexAction()
    {
        $this->redirect('/my/my');
    }

    /**
     * 个人中心
     */
    public function myAction()
    {
        $this->uid = Help::getSession('userid');
        $assign = array(
            'pagetitle' => '个人中心', 'active' => 'my',
        );
        if (!Yaf_Session::getInstance()->has('userid')) {
            $assign['user_avatar'] = '/assets/img/tt-avatar.png';
            $assign['user_level'] = '';
            $assign['user_money'] = '0.00';
            $assign['user_jifen'] = '0.00';
            // num
            $assign['num_daifukuan'] = '0';
            $assign['num_daichengtuan'] = '0';
            $assign['num_daifahuo'] = '0';
            $assign['num_daishouhuo'] = '0';
            $assign['num_daipingjia'] = '0';

        } else {
            $user = $this->db->get('sys_client', ['nickname', 'avatar', 'feeaccount', 'score'], ['id' => $this->uid]);

            $assign['user_nickname'] = $user['nickname'];
            $assign['user_avatar'] = $user['avatar'];
            $assign['user_level'] = $this->levelCalc($user['score']);
            $assign['user_money'] = $user['feeaccount'];
            $assign['user_jifen'] = $user['score'];
            // num
            $assign['num_daifukuan'] = $this->db->count('sys_rush_order', ['client_id' => $this->uid, 'status' => 1]);
            $assign['num_daichengtuan'] = $this->db->count('sys_rush_order', ['client_id' => $this->uid, 'status' => 20]);
            $assign['num_daifahuo'] = $this->db->count('sys_rush_order', ['client_id' => $this->uid, 'status' => 3]);
            $assign['num_daishouhuo'] = $this->db->count('sys_rush_order', ['client_id' => $this->uid, 'status' => 4]);
            $assign['num_daipingjia'] = $this->db->count('sys_rush_order', ['client_id' => $this->uid, 'status' => 5]);
        }

        echo $this->twig->render('my/my.html', $assign);
    }

    /**
     * 完善个人资料
     */
    public function informationAction()
    {

        $assign = array(
            'pagetitle' => '完善个人资料'
        );
        $assign['tip'] = $tip = Help::getg('tip');
        $user = $this->db->get('sys_client', ['avatar', 'nickname', 'mobile', 'province', 'city', 'area', 'address'], ['id' => $this->uid]);
        $assign = array_merge($assign, $user);
        echo $this->twig->render('my/information.html', $assign);
    }

    /**
     * 完善个人资料保存
     */
    public function informationSaveAction()
    {
        $param = array();
        $param['nickname'] = Help::getp('nickname');
        $param['mobile'] = Help::getp('mobile');
        $param['address'] = Help::getp('address');
        $city = Help::getp('city');
        // 拆分city
        $ex = explode(' ', $city);
        $param['province'] = $ex[0];
        $param['city'] = $ex[1];
        $param['area'] = $ex[2];
        // upload
        if (!empty($_FILES['avatar']['tmp_name'])) {
            $avatar = Help::upload('avatar', 'upload');
            $file = PUBLIC_PATH . $avatar;
            $thumb_file = $file . '_thumb.jpg';
            // 生成缩略图
            $res = ImageManager::thumbnail($file, $thumb_file, 150);
            if ($res) {
                $smallavatar = $avatar . '_thumb.jpg';
            }
            $param['avatarbig'] = '/' . $avatar;
            $param['avatar'] = '/' . $smallavatar;
        }
        $res = $this->db->update('sys_client', $param, ['id' => $this->uid]);
        $this->redirect('/my/information?tip=success');
    }

    /**
     * 积分
     */
    public function scoreAction()
    {
        $assign = array(
            'pagetitle' => '积分',
            'user_score_minus' => 0,
        );
        $user = $this->db->get('sys_client', ['avatar', 'feeaccount', 'score'], ['id' => $this->uid]);

        $assign['user_score'] = $user['score'];
        $assign['user_level'] = $this->levelCalc($user['score']);
        // 计算下一级剩余积分
        $config = $this->db->get('sys_config_level', ['id', 'jifen'], ['id' => ($assign['user_level'] + 1)]);
        if ($config['jifen'] > 0) {
            $assign['user_score_minus'] = $config['jifen'] - $assign['user_score'];
        }

        // 积分记录
        $list = $this->db->select('sys_client_score', '*', ['client_id' => $this->uid, 'LIMIT' => 100, 'ORDER' => ['id' => 'DESC']]);
        foreach ($list as $key => $val) {
            $list[$key]['regdate'] = Help::formatTime($list[$key]['regdate']);
        }
        $assign['list'] = $list;
        echo $this->twig->render('my/score.html', $assign);
    }

    /**
     * 积分订单
     */
    public function scoreOrderAction()
    {
        $assign = array(
            'pagetitle' => '积分订单'
        );
        // 积分订单
        $list = $this->db->select('sys_score_order', '*', ['status[<]' => 10, 'client_id' => $this->uid, 'LIMIT' => 50, 'ORDER' => ['id' => 'DESC']]);
        foreach ($list as $key => $val) {
            $list[$key]['regdate'] = date('Y-m-d H:i:s', $list[$key]['regdate']);
            $list[$key]['status_text'] = $this->orderStatus($list[$key]['status']);
        }
        $assign['list'] = $list;
        echo $this->twig->render('my/scoreOrder.html', $assign);
    }

    /**
     * 积分订单详情
     */
    public function scoreOrderViewAction()
    {
        $assign = array(
            'pagetitle' => '订单详情'
        );
        $id = intval(Help::getg('id'));
        $goods = $this->db->get('sys_score_order', '*', ['id' => $id, 'client_id' => $this->uid]);
        if (empty($goods)) {
            die('参数错误');
        }
        $goods['status_text'] = $this->orderStatus($goods['status']);


        $assign['goods'] = $goods;
        $assign['address'] = $this->db->get('sys_address', '*', ['id' => $goods['addressid']]);
        // render
        echo $this->twig->render('my/scoreOrderView.html', $assign);
    }

    /**
     * 删除积分订单
     */
    public function scoreOrderDelAction()
    {
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        $order = $this->db->get('sys_score_order', ['status'], ['id' => $id, 'client_id' => $this->uid]);
        if (empty($order)) {
            die('非法操作');
        }
        // remove
        $this->db->update('sys_score_order', ['status' => 10], ['id' => $id, 'client_id' => $this->uid]);
        die('success');
    }

    /**
     * 我的收藏
     */
    public function favAction()
    {
        $assign = array(
            'pagetitle' => '我的收藏'
        );
        $list = $this->db->select('sys_goods_fav', ["[>]sys_goods" => ['goodsid' => 'id']], ['sys_goods.secondtype', 'sys_goods.id', 'sys_goods.rush', 'sys_goods.rushprice', 'sys_goods.price', 'sys_goods.imgurl', 'sys_goods_fav.cid', 'sys_goods_fav.goodsid', 'sys_goods.name'], ['sys_goods_fav.cid' => $this->uid]);

        $assign['list'] = $list;
        echo $this->twig->render('my/fav.html', $assign);
    }

    /**
     * 取消收藏
     */
    public function favRmoveAction()
    {
        // param
        $param = array();
        $param['keytype'] = 1;
        $param['cid'] = $this->uid;
        $param['goodsid'] = intval(Help::getg('goodsid'));
        if (empty($param['goodsid'])) {
            die('参数错误');
        }
        // Del
        $res = $this->db->delete('sys_goods_fav', $param);
        if ($res) {
            die('success');
        } else {
            die('fail');
        }
    }

    /**
     * 清空收藏
     */
    public function favClearAction()
    {
        // param
        $param = array();
        $param['cid'] = $this->uid;
        // Del
        $res = $this->db->delete('sys_goods_fav', $param);
        if ($res) {
            die('success');
        } else {
            die('fail');
        }
    }

    /**
     * 退出登录
     */
    public function exitAction()
    {
        Yaf_Session::getInstance()->__unset('userid');
        Yaf_Session::getInstance()->__unset('openid');
        Yaf_Session::getInstance()->__unset('username');
        $this->redirect('/index');
    }

    /**
     * 关于我们
     */
    public function aboutusAction()
    {
        $assign = array(
            'pagetitle' => '关于我们'
        );

        echo $this->twig->render('my/aboutus.html', $assign);
    }

    /**
     * 账户
     */
    public function accountAction()
    {
        $assign = array(
            'pagetitle' => '账户'
        );
        $uid = Help::getSession('userid');
        $user = $this->db->get('sys_client', ['feeaccount'], ['id' => $uid]);
        $assign['feeaccount'] = $user['feeaccount'];
        echo $this->twig->render('my/account.html', $assign);
    }

    /**
     * 设置
     */
    public function setAction()
    {
        $assign = array(
            'pagetitle' => '设置'
        );
        // 获取客服电话
        $config = $this->db->get('sys_config', ['kefutel'], ['id' => 1]);
        $assign['kefutel'] = $config['kefutel'];
        echo $this->twig->render('my/set.html', $assign);
    }

    /**
     * 完善用户信息
     */
    public function editAction()
    {
        // 读取用户数据
        $user = $this->db->get('sys_client', ['id', 'nickname', 'birthday', 'sex', 'province', 'city', 'area'], ['id' => $this->uid]);
        //print_r($user);
        // view
        $this->getView()->assign('user', $user);
    }

    /**
     * 用户信息保存
     */
    public function userSaveAction()
    {
        $p = array();
        if (!empty($_FILES['upfile']['tmp_name'])) {
            // 大图
            $p['avatar_big'] = Help::upload('upfile', 'upload'); // 表单name, 上传目录
            $file = PUBLIC_PATH . $p['avatar_big'];
            $thumb_file = $file . '_thumb.jpg';
            // 生成缩略图
            $res = ImageManager::thumbnail($file, $thumb_file, 200);
            if ($res) {
                $p['avatar'] = $thumb_file;
            }
        }
        // ID
        $id = Help::getp('id');
        // 名字
        $p['nickname'] = Help::getp('nickname');
        // 性别
        $p['sex'] = Help::getp('sex');
        // 生日
        $p['birthday'] = Help::getp('birthday');
        // 省
        $p['province'] = Help::getp('province');
        // 市
        $p['city'] = Help::getp('city');
        // 区
        $p['area'] = Help::getp('area');
        // 详细地址
        $p['address'] = Help::getp('address');
        // 开始更新
        $res = $this->db->update('sys_client', $p, array(
            'id' => $id
        ));
        if ($res) {
            $this->redirect('/user/edit');
        } else {
            die('error');
        }

        return false;
    }

    /**
     * 意见反馈
     */
    public function feedbackAction()
    {
        $assign = array(
            'pagetitle' => '意见反馈'
        );
        echo $this->twig->render('my/feedback.html', $assign);
    }

    /**
     * 意见反馈保存
     */
    public function feedbackSaveAction()
    {
        // 非空检查
        Help::sys_check_get(['content'], 1);
        // param
        $param = array();
        $param['content'] = Help::getg('content');
        $param['client_id'] = Help::getSession('userid');
        $param['name'] = Help::getSession('username');
        $param['regdate'] = Help::hdate('Y-m-d H:i:s', time());


        $res = $this->db->insert('sys_advice', $param);
        die('success');
    }


    /**
     * 修改支付宝账号
     */
    public function alipaySaveAction()
    {
        // 非空检查
        Help::sys_check_post(['alipayname']);
        // param
        $param = array();
        $param['alipayname'] = Help::getp('alipayname');
        // update
        $res = $this->db->update('sys_client', $param, array(
            'id' => $this->uid
        ));
        if ($res) {
            die('success');
        } else {
            die('fail');
        }
    }

    /**
     * 密码/支付密码
     */
    public function passAction()
    {
        $assign = array(
            'pagetitle' => '设置支付密码'
        );
        echo $this->twig->render('my/pass.html', $assign);
    }

    /**
     * 密码/支付密码修改
     */
    public function passSaveAction()
    {
        // 非空检查
        $post_array = array('keytype', 'pass', 'repass');
        Help::sys_check_get($post_array);
        unset($post_array);
        // param
        $keytype = intval(Help::getg('keytype'));//1：登录密码 2：支付密码
        $pass = md5(Help::getg('pass'));
        $repass = md5(Help::getg('repass'));
        if ($pass != $repass) {
            die('两次输入的密码不一致');
        }
        // 获取用户密码信息
        $user = $this->db->get('sys_client', ['password', 'paypassword'], ['id' => $this->uid]);
        // 修改登录密码
        if ($keytype == 1) {
            // 更新密码
            $res = $this->db->update('sys_client', ['password' => $pass], ['id' => $this->uid]);
        }
        // 修改支付密码
        if ($keytype == 2) {
            // 更新支付密码
            $res = $this->db->update('sys_client', ['paypassword' => $pass], ['id' => $this->uid]);
        }
        die('success');
    }

    /**
     * 收货地址列表
     */
    public function addressAction()
    {
        // list
        $list = $this->db->select('sys_address', '*', ['client_id' => $this->uid, 'ORDER' => ['rec' => 'DESC']]);
        $assign = array(
            'pagetitle' => '收货地址'
        );
        $assign['list'] = $list;
        $keytype = intval(Help::getg('keytype'));
        $assign['keytype'] = $keytype;
        echo $this->twig->render('my/address.html', $assign);
    }

    /**
     * 设置默认收货地址
     */
    public function addressRecAction()
    {
        // 非空检查
        $post_array = array('id');
        Help::sys_check_get($post_array);
        unset($post_array);
        // param
        $id = intval(Help::getg('id'));
        // 检查这个收货地址是否属于我
        $ifhas = $this->db->get('sys_address', ['id'], ['id' => $id, 'client_id' => $this->uid]);
        if (empty($ifhas)) {
            die('参数错误');
        }
        // 取消默认
        $this->db->update('sys_address', ['rec' => 0], ['client_id' => $this->uid]);
        // 设置新默认
        $this->db->update('sys_address', ['rec' => 1], ['id' => $id]);
        die('操作成功!');
    }

    /**
     * 删除收货地址
     */
    public function addressRemoveAction()
    {
        // 非空检查
        $post_array = array('id');
        Help::sys_check_get($post_array);
        unset($post_array);
        // param
        $id = intval(Help::getg('id'));
        // 检查这个收货地址是否属于我
        $ifhas = $this->db->get('sys_address', ['id'], ['id' => $id, 'client_id' => $this->uid]);
        if (empty($ifhas)) {
            die('参数错误');
        }
        // 开始删除
        $res = $this->db->delete('sys_address', ['id' => $id]);
        if ($res) {
            die('success');
        }
    }

    /**
     * 编辑收货地址
     */
    public function addressEditAction()
    {
        // param
        $id = intval(Help::getg('id'));
        if ($id > 0) {
            // 检查这个收货地址是否属于我
            $info = $this->db->get('sys_address', '*', ['id' => $id, 'client_id' => $this->uid]);
            if (empty($info)) {
                die('参数错误');
            }
            $assign = array(
                'pagetitle' => '编辑收货地址'
            );
            $assign['info'] = $info;
            $keytype = intval(Help::getg('keytype'));
            $assign['keytype'] = $keytype;
            echo $this->twig->render('my/addressedit.html', $assign);
        } else {
            $assign = array(
                'pagetitle' => '新增收货地址'
            );
            $assign['info'] = array(
                'id' => '',
                'username' => '',
                'tel' => '',
                'province' => '',
                'city' => '请选择',
                'area' => '',
                'address' => '',
            );
            $keytype = intval(Help::getg('keytype'));
            $assign['keytype'] = $keytype;
            echo $this->twig->render('my/addressedit.html', $assign);
        }

    }

    /**
     * 保存收货地址
     */
    public function addressSaveAction()
    {
        // param
        $id = intval(Help::getp('id'));//编号
        if ($id > 0) {
            $param = array();
            $param['username'] = Help::getp('username');
            $param['tel'] = Help::getp('tel');
            $param['address'] = Help::getp('address');
            // 拆分city
            $ex = explode(' ', Help::getp('city'));
            $param['province'] = $ex[0];
            $param['city'] = $ex[1];
            $param['area'] = $ex[2];
            // Update
            $res = $this->db->update('sys_address', $param, ['id' => $id, 'client_id' => $this->uid]);
            if ($res) {
                die('success');
            } else {
                die('fail');
            }
        } else {
            $param = array();
            $param['client_id'] = $this->uid;
            $param['username'] = Help::getp('username');
            $param['tel'] = Help::getp('tel');
            $param['address'] = Help::getp('address');
            // 拆分city
            $ex = explode(' ', Help::getp('city'));
            $param['province'] = $ex[0];
            $param['city'] = $ex[1];
            $param['area'] = $ex[2];
            // Update
            $res = $this->db->insert('sys_address', $param);
            if ($res) {
                die('success');
            } else {
                die('fail');
            }
        }
    }

    /**
     * 清空消息 [系统/订单]
     */
    public function noticeClearAction()
    {
        $post_array = array('keytype');
        Help::sys_check_get($post_array);
        unset($post_array);
        // param
        $param = array();
        $param['keytype'] = intval(Help::getg('keytype'));
        $param['client_id'] = $this->uid;
        // Del
        $res = $this->db->delete('sys_notice', $param);
        if ($res) {
            die('success');
        } else {
            die('fail');
        }
    }

    /**
     * 支付宝提现
     */
    public function takezfbAction()
    {
        $assign = array(
            'pagetitle' => '支付宝提现'
        );
        // 获取用户支付宝信息
        $user = $this->db->get('sys_client', ['alipayname', 'feeaccount'], ['id' => $this->uid]);
        $assign['user_alipayname'] = $user['alipayname'];
        $assign['user_feeaccount'] = $user['feeaccount'];
        echo $this->twig->render('my/zfbTake.html', $assign);
    }

    /**
     * 银行卡提现
     */
    public function takebankAction()
    {
        $assign = array(
            'pagetitle' => '银行卡提现'
        );
        // 获取用户支付宝信息
        $user = $this->db->get('sys_client', ['nickname', 'bank', 'bankname', 'bankuser', 'bankcard', 'alipayname', 'feeaccount'], ['id' => $this->uid]);
        $assign['user_bank'] = $user['bank'];
        $assign['user_bankname'] = $user['bankname'];
        $assign['user_bankuser'] = $user['bankuser'];
        $assign['user_bankcard'] = $user['bankcard'];
        $assign['user_feeaccount'] = $user['feeaccount'];
        echo $this->twig->render('my/bankTake.html', $assign);
    }

    /**
     * 提现 提交
     */
    public function takeSubmitAction()
    {
        $keytype = intval(Help::getg('keytype'));//提现方式 1支付宝 2银行卡
        $money = floatval(Help::getg('money'));
        $pass = Help::getg('pass');
        if (empty($money)) {
            die('请输入提现金额!');
        }
        if (empty($pass)) {
            die('请输入支付密码!');
        }
        // 获取用户信息
        $user = $this->db->get('sys_client', ['nickname', 'bank', 'bankname', 'bankuser', 'bankcard', 'alipayname', 'feeaccount', 'paypassword'], ['id' => $this->uid]);
        if (empty($user['paypassword'])) {
            die('paypass');
        }
        // pass
        if (md5($pass) != $user['paypassword']) {
            die('支付密码错误!');
        }
        // 提现金额判断
        if (floatval($money) > $user['feeaccount']) {
            die('账户余额不足!');
        }
        if (($money % 100) > 0) {
            die('金额必须为100的整数倍!');
        }
        if ($keytype == 1)//支付宝提现
        {
            $keytag = 3;
            if (empty($user['alipayname'])) {
                die('请先完善支付宝账户!');
            }
            $param = array();
            $param['client_id'] = $this->uid;
            $param['nickname'] = $user['nickname'];
            $param['keytype'] = $keytype;
            $param['applyfee'] = $money;
            $param['alipayname'] = $user['alipayname'];
            $param['statustype'] = 0;
            $param['regdate'] = time();

        } else if ($keytype == 2) {
            $keytag = 4;
            $param = array();
            $param['client_id'] = $this->uid;
            $param['nickname'] = $user['nickname'];
            $param['keytype'] = $keytype;
            $param['applyfee'] = $money;
            $param['statustype'] = 0;
            $param['regdate'] = time();
            $param['bank'] = $user['bank'];
            $param['bankname'] = $user['bankname'];
            $param['bankuser'] = $user['bankuser'];
            $param['bankcard'] = $user['bankcard'];
        } else {
            die('keytype 错误!');
        }
        $parampay = array(
            'client_id' => $this->uid,
            'paytype' => $keytag,
            'keytype' => '5',
            'keyid' => 0,
            'out_trade_no' => 'TX' . $this->uid . Help::randStr(10),
            'total_fee' => $money,
            'payflag' => '0',
            'content' => '提现',
            'regdate' => time(),
        );
        $this->db->action(function ($db) use ($param, $parampay) {
            // 插入到提现记录
            $db->insert('sys_cash', $param);
            $cashid = $db->id();
            if ($cashid < 1) {
                return false;
            }
            // 插入到交易记录表
            $parampay['keyid'] = $cashid;
            $db->insert('sys_pay', $parampay);
            // 更新余额
            $db->update('sys_client', ['feeaccount[-]' => $param['applyfee']], ['id' => $this->uid]);
        });
        die('success');

    }

    /**
     * 完善支付宝账户
     */
    public function zfbAction()
    {
        $assign = array(
            'pagetitle' => '填写支付宝账号'
        );
        $user = $this->db->get('sys_client', ['alipayname', 'feeaccount'], ['id' => $this->uid]);
        $assign['user_alipayname'] = $user['alipayname'];
        echo $this->twig->render('my/zfb.html', $assign);
    }

    /**
     * 完善支付宝账户提交
     */
    public function zfbSaveAction()
    {
        $alipay = Help::getg('alipay');
        if (empty($alipay)) {
            die('请填写支付宝账号!');
        }
        $this->db->update('sys_client', ['alipayname' => $alipay], ['id' => $this->uid]);
        die('success');
    }

    /**
     * 编辑银行卡信息
     */
    public function bankAction()
    {
        $assign = array(
            'pagetitle' => '编辑银行卡'
        );
        // 读取用户数据
        $user = $this->db->get('sys_client', ['bankname', 'bank', 'bankuser', 'bankcard'], ['id' => $this->uid]);
        //print_r($user);
        // view
        $assign['user_bank'] = $user['bank'];
        $assign['user_bankname'] = $user['bankname'];
        $assign['user_bankuser'] = $user['bankuser'];
        $assign['user_bankcard'] = $user['bankcard'];
        echo $this->twig->render('my/bank.html', $assign);
    }

    /**
     * 编辑银行卡信息
     */
    public function bankchooseAction()
    {
        $assign = array(
            'pagetitle' => '选择开户行'
        );
        echo $this->twig->render('my/bankchoose.html', $assign);
    }

    /**
     * 编辑银行卡信息
     */
    public function bankchooseSaveAction()
    {
        $bank = Help::getg('bank');
        if (empty($bank)) {
            die('请选择开户行');
        }
        $this->db->update('sys_client', ['bank' => $bank], ['id' => $this->uid]);
        die('success');
    }

    /**
     * 编辑银行卡
     */
    public function bankSaveAction()
    {
        // 非空检查
        Help::sys_check_post(['bankname', 'bankuser', 'bankcard']);
        // param
        $param = array();
        $param['bankname'] = Help::getp('bankname');
        $param['bankuser'] = Help::getp('bankuser');
        $param['bankcard'] = Help::getp('bankcard');
        // update
        $res = $this->db->update('sys_client', $param, array(
            'id' => $this->uid
        ));
        if ($res) {
            die('success');
        } else {
            die('fail');
        }
    }

    /**
     * 我的交易记录
     */
    public function payAction()
    {
        $assign = array(
            'pagetitle' => '交易记录'
        );
        $page = intval(Help::getg('page'));
        if (empty($page) || ($page < 0)) {
            $page = 0;
        }
        $start_index = $page * 10;
        $where = array(
            'ORDER' => ['id' => 'DESC']
        );
        $where['client_id'] = $this->uid;
        // total
        // $total = $this->db->count('sys_pay', $where);
        $where['LIMIT'] = [$start_index, 100];
        // LIST
        $list = $this->db->select('sys_pay', '*', $where);
        foreach ($list as $key => $val) {
            $list[$key]['regdate'] = Help::formatTime($list[$key]['regdate']);
            $list[$key]['avatar'] = Help::getSession('avatar');
        }
        // $assign['total'] = $total;
        $assign['list'] = $list;
        echo $this->twig->render('my/pay.html', $assign);
    }

    /**
     * 我的优惠券
     */
    public function couponAction()
    {
        $time = time();
        $assign = array(
            'pagetitle' => '优惠券'
        );
        $list = $this->db->query('SELECT a.id,a.client_id,a.cid,a.usestatus, b.endtime, b.begintime, b.keytype,b.keyid,b.price,b.minprice,b.status FROM `sys_coupon_client` AS a LEFT JOIN `sys_coupon` AS b ON(a.cid = b.id) WHERE 1 ORDER BY a.usestatus, b.endtime DESC LIMIT 50')->fetchAll();
        foreach ($list as $key => $val) {
            // 判断优惠券状态
            $list[$key]['flag'] = '';
            if ($list[$key]['usestatus'] > 0) {
                $list[$key]['flag'] = 'overuse';
            } elseif ($list[$key]['endtime'] < $time) {
                $list[$key]['flag'] = 'overdue';
            } elseif ($list[$key]['status'] > 0) {
                $list[$key]['flag'] = 'overdue';
            }
            $list[$key]['price'] = intval($list[$key]['price']);
            $list[$key]['minprice'] = intval($list[$key]['minprice']);
            $list[$key]['endtime'] = date('Y-m-d', $list[$key]['endtime']);


        }
        $assign['list'] = $list;
        echo $this->twig->render('my/coupon.html', $assign);
    }

    /**
     * 我的订单
     */
    public function orderAction()
    {
        $time = time();
        $assign = array(
            'pagetitle' => '我的订单'
        );
        $status = intval(Help::getg('status'));
        $assign['status'] = $status;
        echo $this->twig->render('my/order.html', $assign);
    }

    /**
     * 我的订单 Json
     */
    public function orderJsonAction()
    {
        $status = intval(Help::getg('status'));
        if ($status < 1) {
            $starr = [1, 2, 3, 4, 5, 6, 7, 8];
        } elseif ($status == 100) {
            $starr = [6, 7, 9];
        } else {
            $starr = $status;
        }
        $page = intval(Help::getg('page'));
        $shownum = 5;
        $start_num = $page * $shownum;
        $list = $this->db->select('sys_order', '*', ['status' => $starr, 'ORDER' => ['id' => 'DESC'], 'client_id' => $this->uid, 'LIMIT' => [$start_num, $shownum]]);
        // 获取订单商品
        foreach ($list as $key => $val) {
            $buycount = 0;
            $item = $this->db->select('sys_order_item', ['goodsid', 'goodsprice', 'price', 'buycount', 'name', 'imgurl'], ['orderid' => $list[$key]['id']]);
            for ($i = 0; $i < count($item); $i++) {
                $buycount += $item[$i]['buycount'];
            }
            $list[$key]['item'] = $item;
            $list[$key]['item_count'] = $buycount;
            $list[$key]['flag'] = $this->orderStatus($list[$key]['status']);
        }
        echo json_encode($list);
        die;
    }

    /**
     * 我的订单详情
     */
    public function orderViewAction()
    {
        $time = time();
        $assign = array(
            'pagetitle' => '订单详情'
        );
        // param
        $id = intval(Help::getg('id'));
        $order = $this->db->get('sys_order', '*', ['id' => $id]);
        if (empty($order)) {
            die('参数错误');
        }
        // goods
        $buycount = 0;
        $item = $this->db->select('sys_order_item', ['goodsid', 'goodsprice', 'price', 'buycount', 'name', 'imgurl', 'reply'], ['orderid' => $order['id']]);
        for ($i = 0; $i < count($item); $i++) {
            $buycount += $item[$i]['buycount'];
        }
        $order['goodslist'] = $item;
        $order['goodslist_count'] = count($item);
        $order['item_count'] = $buycount;
        $order['flag'] = $this->orderStatus($order['status']);
        // 优惠券
        if ($order['couponid'] > 0) {
            $order['coupon'] = $this->db->get('sys_coupon_client', ['[>]sys_coupon' => ['cid' => 'id']], ['sys_coupon.price'], ['sys_coupon_client.id' => $order['couponid']]);
        }
        // 收货信息
        $order['address'] = $this->db->get('sys_address', '*', ['id' => $order['addressid']]);
        $order['regdate'] = date('Y-m-d H:i:s', $order['regdate']);
        if ($order['paytype'] == '1') {
            $order['paytype_text'] = '余额';
        } elseif ($order['paytype'] == '2') {
            $order['paytype_text'] = '微信';
        }
        // 是否退款中
        if ($order['status'] == '6' || $order['status'] == '7' || $order['status'] == '9') {
            $order['receipt'] = 1;
        }

        $assign['order'] = $order;
        echo $this->twig->render('my/orderView.html', $assign);
    }

    /**
     * 确认收货
     */
    public function orderReceiptAction()
    {
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        $order = $this->db->has('sys_order', ['id' => $id, 'client_id' => $this->uid, 'status' => '3']);
        if (empty($order)) {
            die('订单状态错误');
        }
        // cancel
        $this->db->update('sys_order', ['status' => 4], ['id' => $id, 'client_id' => $this->uid, 'status' => '3']);
        die('success');
    }

    /**
     * 取消订单
     */
    public function orderCancelAction()
    {
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        $order = $this->db->has('sys_order', ['id' => $id, 'client_id' => $this->uid, 'status' => '1']);
        if (empty($order)) {
            die('订单状态错误');
        }
        // cancel
        $this->db->update('sys_order', ['status' => 8], ['id' => $id, 'client_id' => $this->uid, 'status' => '1']);
        // 恢复库存和销量
        $temp = $this->db->select('sys_order_item', ['goodsid', 'buycount'], ['orderid' => $id]);
        foreach ($temp as $key => $val) {
            $this->db->update('sys_goods', ['stock[+]' => $temp[$key]['buycount'], 'realsale[-]' => $temp[$key]['buycount']], ['id' => $temp[$key]['goodsid']]);
        }
        die('success');
    }

    /**
     * 删除订单
     */
    public function orderDelAction()
    {
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        $order = $this->db->get('sys_order', ['status'], ['id' => $id, 'client_id' => $this->uid]);
        if (empty($order)) {
            die('非法操作');
        }
        // status 5,8
        $sar = array(5, 8);
        if (!in_array($order['status'], $sar)) {
            die('订单状态错误!');
        }
        // remove
        $this->db->update('sys_order', ['status' => 10], ['id' => $id, 'client_id' => $this->uid]);
        die('success');
    }

    /**
     * 申请退款
     */
    public function refundAction()
    {
        $assign = array(
            'pagetitle' => '订单详情'
        );
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        // param
        $id = intval(Help::getg('id'));
        $order = $this->db->get('sys_order', '*', ['id' => $id, 'client_id' => $this->uid]);
        if (empty($order)) {
            die('参数错误');
        }
        // goods
        $buycount = 0;
        $item = $this->db->select('sys_order_item', ['goodsid', 'goodsprice', 'price', 'buycount', 'name', 'imgurl'], ['orderid' => $order['id']]);
        for ($i = 0; $i < count($item); $i++) {
            $buycount += $item[$i]['buycount'];
        }
        $order['goodslist'] = $item;
        $order['item_count'] = $buycount;
        $order['flag'] = $this->orderStatus($order['status']);
        // 优惠券
        if ($order['couponid'] > 0) {
            $order['coupon'] = $this->db->get('sys_coupon_client', ['[>]sys_coupon' => ['cid' => 'id']], ['sys_coupon.price'], ['sys_coupon_client.id' => $order['couponid']]);
        }
        // 收货信息
        $order['address'] = $this->db->get('sys_address', '*', ['id' => $order['addressid']]);


        $order['regdate'] = date('Y-m-d H:i:s', $order['regdate']);
        if ($order['paytype'] == '1') {
            $order['paytype_text'] = '余额';
        } elseif ($order['paytype'] == '2') {
            $order['paytype_text'] = '微信';
        }
        $assign['order'] = $order;
        echo $this->twig->render('my/refund.html', $assign);
    }

    /**
     * 申请退款提交
     */
    public function refundSaveAction()
    {
        $id = intval(Help::getp('id'));
        if (empty($id)) {
            die('参数错误!');
        }
        $returndemo = Help::getp('returndemo');
        if (empty($returndemo)) {
            die('请填写退款原因!');
        }
        $order = $this->db->get('sys_order', '*', ['id' => $id, 'client_id' => $this->uid]);
        if (empty($order)) {
            die('参数错误!');
        }
        // status 2, 3
        $sar = array(2, 3);
        if (!in_array($order['status'], $sar)) {
            die('订单状态错误!');
        }
        // update status
        $this->db->update('sys_order', ['status' => 6, 'returndemo' => $returndemo], ['id' => $id, 'client_id' => $this->uid]);
        die('success');
    }

    /**
     * 评价商品
     */
    public function evaluateAction()
    {
        $assign = array(
            'pagetitle' => '金盛微商城',
            'active' => 'index',
        );
        $orderid = intval(Help::getg('orderid'));
        $goodsid = intval(Help::getg('goodsid'));
        if ($orderid < 1 || $goodsid < 1) {
            die('参数不完整!');
        }
        // 检测订单状态是否为待评价
        $order = $this->db->get('sys_order', ['status'], ['id' => $orderid]);
        if ($order['status'] != '4') {
            $this->success(0, '订单状态错误!');
        }
        // 检测是否已经评价
        $ifhas = $this->db->has('sys_goods_reply', ['goodsid' => $goodsid, 'orderid' => $orderid]);
        if (!empty($ifhas)) {
            $this->success(0, '请勿重复评价!');
        }
        //
        $info = $this->db->get('sys_order_item', '*', ['orderid' => $orderid, 'goodsid' => $goodsid]);
        $assign['info'] = $info;
        echo $this->twig->render('/my/evaluate.html', $assign);
    }

    /**
     * 评价提交
     */
    public function evaluateSaveAction()
    {
        $param = array();
        // param
        $param['goodsid'] = intval(Help::getp('goodsid'));
        $param['orderid'] = intval(Help::getp('orderid'));
        $param['stars'] = intval(Help::getp('stars'));
        $param['remark'] = Help::getp('remark');
        $param['regdate'] = time();
        if (empty($param['goodsid']) || empty($param['orderid']) || empty($param['stars']) || empty($param['remark'])) {
            $this->success(0, '参数不完整!');
        }
        // 检测是否已经评价
        $ifhas = $this->db->has('sys_goods_reply', ['goodsid' => $param['goodsid'], 'orderid' => $param['orderid']]);
        if (!empty($ifhas)) {
            $this->success(0, '请勿重复评价!');
        }
        // 获取用户信息
        $user = $this->db->get('sys_client', ['nickname', 'avatar'], ['id' => $this->uid]);
        $param['client_id'] = $this->uid;
        $param['username'] = $user['nickname'];
        $param['avatar'] = $user['avatar'];
        // upload
        $subdir1 = date('Ym');
        $subdir2 = date('d');
        $subdir = PUBLIC_PATH . 'upload' . '/' . $subdir1 . '/' . $subdir2 . '/';
        if (!file_exists($subdir)) {
            mkdir($subdir, 0777, true);
        }
        if ($_POST['pic1']) {
            $base64 = $_POST['pic1'];
            $img = Help::upBase64($base64, $subdir, $this->uid . '_reply_');
            $param['imga'] = '/upload/' . $subdir1 . '/' . $subdir2 . '/' . $img;
        }
        if ($_POST['pic2']) {
            $base64 = $_POST['pic2'];
            $img = Help::upBase64($base64, $subdir, $this->uid . '_reply_');
            $param['imgb'] = '/upload/' . $subdir1 . '/' . $subdir2 . '/' . $img;
        }
        if ($_POST['pic3']) {
            $base64 = $_POST['pic3'];
            $img = Help::upBase64($base64, $subdir, $this->uid . '_reply_');
            $param['imgc'] = '/upload/' . $subdir1 . '/' . $subdir2 . '/' . $img;
        }
        if ($_POST['pic4']) {
            $base64 = $_POST['pic4'];
            $img = Help::upBase64($base64, $subdir, $this->uid . '_reply_');
            $param['imgd'] = '/upload/' . $subdir1 . '/' . $subdir2 . '/' . $img;
        }
        // 插入到评价表
        $this->db->insert('sys_goods_reply', $param);
        // 更新商品为已评价
        $this->db->update('sys_order_item', ['reply' => 1], ['goodsid' => $param['goodsid'], 'orderid' => $param['orderid']]);
        // 检查其他商品是否评价
        $ifhas = $this->db->has('sys_order_item', ['reply' => 0, 'orderid' => $param['orderid']]);
        // 如果全部评价过了, 则更新订单已完成
        if (empty($ifhas)) {
            $this->db->update('sys_order', ['status' => 5], ['id' => $param['orderid']]);
        }
        $this->success(1, '评价成功!', '/my/order');
    }

    /**
     * 我的订单
     */
    public function rushOrderAction()
    {
        $time = time();
        $assign = array(
            'pagetitle' => '我的拼团订单'
        );
        $status = intval(Help::getg('status'));
        if ($status < 1) {
            $starr = [1, 2, 3, 4, 5, 6, 7, 20];
        } elseif ($status == 100) {
            $starr = [6, 7, 9];
        } else {
            $starr = $status;
        }
        $assign['status'] = $status;
        // 获取订单列表
        $list = $this->db->select('sys_rush_order', '*', ['client_id' => $this->uid, 'status' => $starr, 'ORDER' => ['id' => 'DESC'], 'LIMIT' => 100]);
        foreach ($list as $key => $val) {
            $list[$key]['status_text'] = $this->orderStatus($list[$key]['status']);
            // 如果是待成团商品
            if ($list[$key]['status'] == 20) {
                // 获取pid
                $ru = $this->db->get('sys_goods_rush', ['pid', 'regdate'], ['id' => $list[$key]['rushid']]);
                if ($ru['pid'] < 1) {
                    $rushpid = $list[$key]['rushid'];
                } else {
                    $rushpid = $ru['pid'];
                }
                // 统计参与人数
                $total = $this->db->count('sys_goods_rush', ['pid' => $rushpid]);
                // 计算剩余人数
                $list[$key]['surplus'] = $list[$key]['rushnum'] - $total - 1;
                // 剩余时间
                $list[$key]['sec'] = $this->secToTime($ru['regdate'] + 86400 - time());
            }
        }
        $assign['list'] = $list;
        echo $this->twig->render('my/rushOrder.html', $assign);
    }

    /**
     * 取消拼团订单
     */
    public function rushOrderCancelAction()
    {
        $id = intval(Help::getg('id'));
        if (empty($id)) {
            die('参数错误');
        }
        $order = $this->db->get('sys_rush_order', '*', ['id' => $id, 'client_id' => $this->uid, 'status' => '1']);
        //echo $order['goodsname'];die;
        if (empty($order)) {
            die('订单状态错误');
        }
        // cancel
        $this->db->update('sys_rush_order', ['status' => 8], ['id' => $id, 'client_id' => $this->uid, 'status' => '1']);
        // 恢复库存和销量
        $this->db->update('sys_goods', ['stock[+]' => $order['buycount'], 'realsale[-]' => $order['buycount']], ['id' => $order['goodsid']]);
        die('success');
    }

    /**
     * 我的订单详情
     */
    public function rushOrderViewAction()
    {
        $time = time();
        $assign = array(
            'pagetitle' => '订单详情'
        );
        // param
        $id = intval(Help::getg('id'));
        $order = $this->db->get('sys_rush_order', '*', ['id' => $id]);
        if (empty($order)) {
            die('参数错误');
        }
        $order['flag'] = $this->orderStatus($order['status']);
        // 收货信息
        $order['address'] = $this->db->get('sys_address', '*', ['id' => $order['addressid']]);
        $order['regdate'] = date('Y-m-d H:i:s', $order['regdate']);
        if ($order['paytype'] == '1') {
            $order['paytype_text'] = '余额';
        } elseif ($order['paytype'] == '2') {
            $order['paytype_text'] = '微信';
        }
        // 是否退款中
        if ($order['status'] == '6' || $order['status'] == '7' || $order['status'] == '9') {
            $order['receipt'] = 1;
        }
        // 如果是待成团商品
        $order['surplus'] = 0;
        if ($order['status'] == 20) {
            // 获取pid
            $ru = $this->db->get('sys_goods_rush', ['pid', 'regdate'], ['id' => $order['rushid']]);
            if ($ru['pid'] < 1) {
                $rushpid = $order['rushid'];
            } else {
                $rushpid = $ru['pid'];
            }
            // 统计参与人数
            $total = $this->db->count('sys_goods_rush', ['pid' => $rushpid]);
            // 计算剩余人数
            $order['surplus'] = $order['rushnum'] - $total - 1;
            // 剩余时间
            $order['sec'] = $this->secToTime($ru['regdate'] + 86400 - time());
        }
        $assign['order'] = $order;
        // 获取pid
        $pid = 0;
        $temp = $this->db->get('sys_goods_rush', ['pid'], ['id' => $order['rushid']]);
        if ($temp['pid'] > 0) {
            $pid = $temp['pid'];
        } else {
            $pid = $order['rushid'];
        }
        // 获取参团列表
        $tuanuser = $this->db->select('sys_goods_rush', '*', ['OR' => ['id' => $pid, 'pid' => $pid], 'ORDER' => ['pid' => 'ASC']]);

        foreach ($tuanuser as $key => $val) {
            $avatar = $this->db->get('sys_client', ['avatar'], ['id' => $tuanuser[$key]['uid']]);
            $tuanuser[$key]['avatar'] = $avatar['avatar'];
        }
        $assign['tuanuser'] = $tuanuser;

        echo $this->twig->render('my/rushOrderView.html', $assign);
    }

    /**
     * 消息中心
     */
    public function noticeAction()
    {
        $assign = array(
            'pagetitle' => '订单详情'
        );
        $keytype = intval(Help::getg('keytype'));
        $where = ['client_id' => $this->uid];
        if (empty($keytype)) {
            $keytype = 2;
        }
        $where['keytype'] = $keytype;
        $list = $this->db->select('sys_notice', '*', $where);
        foreach ($list as $key => $val) {
            $list[$key]['regdate'] = Help::formatTime($list[$key]['regdate']);
        }
        $assign['list'] = $list;
        $assign['keytype'] = $keytype;
        // render
        echo $this->twig->render('/my/notice.html', $assign);
    }

    /**
     * 删除单条消息
     */
    public function noticeDelAction()
    {
        $id = intval(Help::getg('id'));
        if ($id < 1){
            die('param error');
        }
        $this->db->delete('sys_notice', ['id' => $id, 'client_id' => $this->uid]);
        die('success');
    }
}